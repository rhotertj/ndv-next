generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Club {
  id     Int      @id @default(autoincrement())
  name   String?  @unique(map: "sqlite_autoindex_Club_1")
  Player Player[]
  Team   Team[]
}

model Competition {
  id          Int         @id @default(autoincrement())
  name        String?
  association String?
  year        String?
  Team        Team[]
  Teammatch   Teammatch[]
}

model Doublesmatch {
  id                                       Int        @id @default(autoincrement())
  team_match                               Int?
  home_player1                             Int?
  home_player2                             Int?
  away_player1                             Int?
  away_player2                             Int?
  result                                   String?
  match_number                             Int?
  Player_Doublesmatch_away_player2ToPlayer Player?    @relation("Doublesmatch_away_player2ToPlayer", fields: [away_player2], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Player_Doublesmatch_away_player1ToPlayer Player?    @relation("Doublesmatch_away_player1ToPlayer", fields: [away_player1], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Player_Doublesmatch_home_player2ToPlayer Player?    @relation("Doublesmatch_home_player2ToPlayer", fields: [home_player2], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Player_Doublesmatch_home_player1ToPlayer Player?    @relation("Doublesmatch_home_player1ToPlayer", fields: [home_player1], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Teammatch                                Teammatch? @relation(fields: [team_match], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Human {
  id     String   @id
  name   String?
  Player Player[]
}

model Player {
  id                                             Int            @id @unique(map: "sqlite_autoindex_Player_1") @default(autoincrement())
  human                                          String?
  club                                           Int?
  association_id                                 String?
  team                                           Int?
  Doublesmatch_Doublesmatch_away_player2ToPlayer Doublesmatch[] @relation("Doublesmatch_away_player2ToPlayer")
  Doublesmatch_Doublesmatch_away_player1ToPlayer Doublesmatch[] @relation("Doublesmatch_away_player1ToPlayer")
  Doublesmatch_Doublesmatch_home_player2ToPlayer Doublesmatch[] @relation("Doublesmatch_home_player2ToPlayer")
  Doublesmatch_Doublesmatch_home_player1ToPlayer Doublesmatch[] @relation("Doublesmatch_home_player1ToPlayer")
  Team                                           Team?          @relation(fields: [team], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Club                                           Club?          @relation(fields: [club], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Human                                          Human?         @relation(fields: [human], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Singlesmatch_Singlesmatch_away_playerToPlayer  Singlesmatch[] @relation("Singlesmatch_away_playerToPlayer")
  Singlesmatch_Singlesmatch_home_playerToPlayer  Singlesmatch[] @relation("Singlesmatch_home_playerToPlayer")
  Skillrating                                    Skillrating[]

  @@index([human], map: "ix_Player_human")
}

model Singlesmatch {
  id                                      Int        @id @default(autoincrement())
  team_match                              Int?
  home_player                             Int?
  away_player                             Int?
  result                                  String?
  match_number                            Int?
  Player_Singlesmatch_away_playerToPlayer Player?    @relation("Singlesmatch_away_playerToPlayer", fields: [away_player], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Player_Singlesmatch_home_playerToPlayer Player?    @relation("Singlesmatch_home_playerToPlayer", fields: [home_player], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Teammatch                               Teammatch? @relation(fields: [team_match], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Skillrating {
  id            Int     @id @default(autoincrement())
  player        Int?
  team          Int?
  rating_mu     Float?
  rating_sigma  Float?
  latest_update String?
  Team          Team?   @relation(fields: [team], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Player        Player? @relation(fields: [player], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Team {
  id                                  Int           @id @default(autoincrement())
  rank                                String?
  club                                Int?
  year                                String?
  competition                         Int?
  Player                              Player[]
  Skillrating                         Skillrating[]
  Competition                         Competition?  @relation(fields: [competition], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Club                                Club?         @relation(fields: [club], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Teammatch_Teammatch_away_teamToTeam Teammatch[]   @relation("Teammatch_away_teamToTeam")
  Teammatch_Teammatch_home_teamToTeam Teammatch[]   @relation("Teammatch_home_teamToTeam")
}

model Teammatch {
  id                             Int            @id @default(autoincrement())
  date                           String?
  competition                    Int?
  result                         String?
  home_team                      Int?
  away_team                      Int?
  used_for_rating                Boolean?
  Doublesmatch                   Doublesmatch[]
  Singlesmatch                   Singlesmatch[]
  Team_Teammatch_away_teamToTeam Team?          @relation("Teammatch_away_teamToTeam", fields: [away_team], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Team_Teammatch_home_teamToTeam Team?          @relation("Teammatch_home_teamToTeam", fields: [home_team], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Competition                    Competition?   @relation(fields: [competition], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
